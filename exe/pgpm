#!/usr/bin/env ruby
# frozen_string_literal: true

require "English"
require "bundler/setup"
require "pgpm"
require "dry/cli"
require "parallel"
require "etc"

module Pgpm
  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc "Print version"

        def call(*)
          puts Pgpm::VERSION
        end
      end

      module SharedOptions
        def self.included(base)
          base.class_eval do
            option :pkgdir, type: :string, default: File.directory?("packages") ? "packages" : nil, desc: "Directory to load packages from"
          end
        end
      end

      class Build < Dry::CLI::Command
        desc "Build packages"

        include SharedOptions

        option :os, type: :string, default: Pgpm::OS.auto_detect&.name, desc: "OS name"
        option :arch, type: :string, default: Pgpm::Arch.host.name, desc: "Target architecture"
        option :pgdist, type: :string, default: "pgdg", desc: "Target Postgres distribution"
        option :pgver, type: :string, default: Pgpm::Postgres::Distribution.versions.last.to_s, desc: "Target Postgres version"
        option :path, type: :path, desc: "Override path to the source"
        argument :packages, type: :array, required: true, desc: "Package names"

        module ExtendedProc
          refine Proc do
            def and_then(callable)
              lambda do |*args|
                res1 = call(*args)
                res2 = callable.call(*args)
                return res1 + res2 if res1.is_a?(Array) && res2.is_a?(Array)

                res2
              end
            end
          end
        end

        using ExtendedProc

        # rubocop:disable Metrics/ParameterLists:
        def call(packages:, args: nil, os: nil, arch: nil, pgdist: nil, pgver: nil, pkgdir: nil, path: nil)
          _ = args
          _ = os
          _ = pgdist

          Pgpm.load_packages(pkgdir)

          # puts "There is no build support for OS distribution `#{os}`"
          # exit(1)
          pkgs = Parallel.flat_map(packages, in_threads: Etc.nprocessors) do |package|
            name, version = package.split("@")
            version ||= :latest
            p = Pgpm::Package[name]
            if p.nil?
              puts "Package #{name} not found"
              exit(1)
            end
            if p.contrib?
              puts "Can't build a contrib package"
              exit(1)
            end
            pkg = path.nil? ? p[version] : p.new(version).with_path(path)
            if pkg.nil?
              puts "Package #{name} with version #{version} not found"
              exit(1)
            end
            pkg
          end

          os = os ? Pgpm::OS.find(os) : Pgpm::OS.auto_detect
          arch = if arch
                   Pgpm::Arch.new(arch)
                 else
                   Pgpm::Arch.host
                 end

          pgver = Package::Version.new(pgver)
          matching_pgver = Postgres::Distribution.versions.sort.reverse.find { |v| v.satisfies?(">= #{pgver}") && v.satisfies?("< #{pgver.major + 1}") }
          unless matching_pgver
            puts "#{pgver} is not a known Postgres version"
            exit(1)
          end

          unless os.is_a?(Pgpm::OS::RedHat)
            puts "#{os.name} is not a supported OS at this moment"
            exit(1)
          end
          puts "Building #{pkgs.map { |p| "#{p.name}@#{p.version}" }.join(", ")} for Postgres #{matching_pgver}"
          selected_pgdist = Postgres::RedhatBasedPgdg.new(matching_pgver.to_s)

          os.with_scope do
            arch.with_scope do
              selected_pgdist.with_scope do
                pkgs = pkgs.flat_map do |pkg|
                  [pkg, *pkg.all_requirements]
                end.reject(&:contrib?)

                b = pkgs.reduce(nil) do |c, p|
                  if p.broken?
                    puts "Can't build a broken package #{p.name}@#{p.version}"
                    exit(1)
                  end
                  p = Pgpm::ScopedObject.new(p, os, arch)
                  spec = p.to_rpm_spec
                  builder = Pgpm::RPM::Builder.new(spec)
                  src_builder = builder.source_builder
                  p = c.nil? ? src_builder : c.and_then(src_builder)
                  p.and_then(builder.versionless_builder)
                end

                srpms = b.call
                Pgpm::RPM::Builder.builder(srpms).call
              end
            end
          end
        end

        # rubocop:enable Metrics/ParameterLists:
      end

      class Search < Dry::CLI::Command
        include SharedOptions

        argument :query, type: :string, default: ".*", desc: "Search query"
        option :format, values: %w[text json], default: "text", desc: "Output format", aliases: ["-f"]

        def call(query:, args: nil, pkgdir: nil, format: nil)
          _ = args

          Pgpm.load_packages(pkgdir)

          query_regexp = Regexp.new(query, "i")
          if format == "json"
            puts "["
          end

          Parallel.filter_map(Pgpm::Package, in_threads: Etc.nprocessors) do |p|
            next if p.contrib?

            found = p.all_searchable_texts.any? do |t|
              t =~ query_regexp
            end
            next unless found

            output = case format
                     when "json" then Oj.dump({
                                                name: p.package_name,
                                                summary: p.summary,
                                                description: p.description,
                                                license: p.license,
                                                versions: p.package_versions.map(&:to_s)
                                              }, mode: :strict)
                     else
                       "#{p.package_name}: #{p.description}"
                     end
            puts output
          rescue StandardError
            warn "Error fetching #{p.package_name}: #{$ERROR_INFO.message}"
          end

          return unless format == "json"

          puts "]"
        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]
      register "build", Build
      register "search", Search
    end
  end
end

Dry::CLI.new(Pgpm::CLI::Commands).call
